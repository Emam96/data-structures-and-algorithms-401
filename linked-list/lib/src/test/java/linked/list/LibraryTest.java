/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test
    public void testEmptyList() {

        LinkedList list = new LinkedList();

        String msg = list.toString();
//        System.out.println(msg);
        assertEquals("Contents:\n" +
                "list is empty :(", msg);

    }

    @Test
    public void testInsert() {

        LinkedList list = new LinkedList();

         list.insert("emam");
        String msg = list.toString();
//        System.out.println(msg);
        assertEquals("Contents:\n" +
                "{emam} -> ", msg);

    }

    @Test
    public void testTrueInclude() {
        LinkedList list = new LinkedList();
        list.insert("emam");
        boolean msg = list.includes("emam");
           assertTrue(msg);

    }

    @Test
    public void testFalseInclude() {
        LinkedList list = new LinkedList();
        list.insert("emam");
        boolean msg = list.includes("someone");
        assertFalse(msg);

    }

    @Test
    public void testAllList() {
        LinkedList list = new LinkedList();
        list.insert("emam");
        list.insert("emam");
        list.insert("emam");
        String msg = list.toString();
//        System.out.println(msg);
        assertEquals("Contents:\n" +
                "{emam} -> {emam} -> {emam} -> ", msg);

    }

    @Test
    public void testAppend() {
        LinkedList list = new LinkedList();
        list.insert("emam");
        list.insert("emam");
        list.insert("emam");
        list.append("someone");
        String msg = list.toString();
  // TESTING FOR MULTIPLE INPUTS
        assertTrue(msg.endsWith("{someone} -> "));
        list.append("else");
        String msg2 = list.toString();
        System.out.println(msg2);
        assertTrue(msg2.endsWith("{else} -> "));
    }



    @Test
    public void testInsertBefore() {
        LinkedList list = new LinkedList();
        list.insert("emam");
        list.insert("ahmed");
        list.insert("ali");
        // MIDDLE
        list.insertBefore("ahmed", "hani");
        String msg = list.toString();
        System.out.println(msg);
        assertEquals("Contents:\n" +
                "{ali} -> {hani} -> {ahmed} -> {emam} -> ", msg);
        // FIRST
        list.insertBefore("ali", "lutfy");
        String msg2 = list.toString();
        System.out.println(msg2);
        assertEquals("Contents:\n" +
                "{lutfy} -> {ali} -> {hani} -> {ahmed} -> {emam} -> ", msg2);

    }


    @Test
    public void testInsertAfter() {
        LinkedList list = new LinkedList();
        list.insert("emam");
        list.insert("ahmed");
        list.insert("ali");
        // MIDDLE
        list.insertAfter("ali", "amman");
        String msg = list.toString();
        System.out.println(msg);
        assertEquals("Contents:\n" +
                "{ali} -> {amman} -> {ahmed} -> {emam} -> ", msg);


    }


    @Test
    public void testKth() {

        // HAPPY PATH
        LinkedList list = new LinkedList();
        list.insert("emam");
        list.insert("ahmed");
        list.insert("ali");

        System.out.println(list.kthFromEnd(2));
        String note = list.kthFromEnd(2);
        assertEquals("The 2   index from the tail is =  ali", note);
    }

    @Test
    public void testKthGreaterThanTheList() {
        LinkedList list = new LinkedList();
        list.insert("emam");
        list.insert("ahmed");
        list.insert("ali");

        System.out.println(list.kthFromEnd(3));
        String note = list.kthFromEnd(3);
        assertEquals("number can't be higher than the length of the list", note);
    }

    @Test
    public void testKthSmallerThanTheList() {
        LinkedList list = new LinkedList();
        list.insert("emam");
        list.insert("ahmed");
        list.insert("ali");

        System.out.println(list.kthFromEnd(-1));
        String note = list.kthFromEnd(-1);
        assertEquals("number can't be less than 0", note);
    }

    @Test
    public void testKthIndexOfOne() {
        LinkedList list = new LinkedList();
        list.insert("emam");


        System.out.println(list.kthFromEnd(0));
        String note = list.kthFromEnd(0);
        assertEquals("The 0   index from the tail is =  emam", note);
    }

    @Test
    public void testZip() {
        LinkedList list = new LinkedList();
        LinkedList list2 = new LinkedList();
        list.insert("emam");
        list.insert("shararah");
        list2.insert("murtadha");
        list2.insert("ali");

        LinkedList test = ZipLists.linkedListZip(list, list2);
        System.out.println(test.toString());

        assertTrue(test.includes("emam"));
        assertTrue(test.includes("ali"));
    }

}