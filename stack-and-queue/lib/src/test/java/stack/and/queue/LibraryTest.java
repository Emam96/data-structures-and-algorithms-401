/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void canPushToStack() {

        Stack s = new Stack();
        s.push("10");
        assertFalse(s.isEmpty());

    }


    @Test void canPushMultipleToStack() {

        Stack s = new Stack();
        s.push("10");
        s.push("8");
        s.push("6");

        String topOfStack = s.peek();
        assertEquals("6", topOfStack);

    }


    @Test void canPopOffStack() {

        Stack s = new Stack();
        s.push("10");
        s.push("8");
        s.push("6");

        s.pop();

        String topOfStack = s.peek();
        assertEquals("8", topOfStack);

    }

    @Test void canPopOffFullStack() {

        Stack s = new Stack();
        s.push("10");
        s.push("8");
        s.push("6");

        s.pop();
        s.pop();
        s.pop();

        assertTrue(s.isEmpty());

    }

    @Test void canPeekNextItemInStack() {

        Stack s = new Stack();
        s.push("10");
        s.push("8");
        s.push("6");

        s.pop();

        String topOfStack = s.peek();
        assertEquals("8", topOfStack);

    }


    @Test void canMakeEmptyStackAndRaiseExp() {

        Stack s = new Stack();

        String topOfStack = s.peek();
        assertEquals("Stack is empty", topOfStack);

    }

/////////////////////////////////////////////////////////////////////////////// QUEUES


    @Test void canEnqueue() {

        Queue q = new Queue();
        q.enqueue("emam");
        assertFalse(q.isEmpty());


    }


    @Test void canEnqueueMultiple() {

        Queue q = new Queue();
        q.enqueue("emam");
        q.enqueue("ali");
        q.enqueue("tomato");
        String frontOfQueue = q.peek();
        assertEquals("emam", frontOfQueue);

    }

    @Test void canDequeue() {

        Queue q = new Queue();
        q.enqueue("emam");
        q.enqueue("ali");
        q.enqueue("tomato");
        String dequeuedValue = q.dequeue();
        assertEquals("emam", dequeuedValue);

    }

    @Test void canPeekQueue() {

        Queue q = new Queue();
        q.enqueue("emam");
        q.enqueue("ali");
        q.enqueue("tomato");
        String frontOfQueue = q.peek();
        assertEquals("emam", frontOfQueue);

    }

    @Test void canEmptyDequeue() {

        Queue q = new Queue();
        q.enqueue("emam");
        q.enqueue("ali");
        q.enqueue("tomato");
        q.dequeue();
        q.dequeue();
        q.dequeue();
        assertTrue(q.isEmpty());

    }


    @Test void canCreateEmptyQueue() {

        Queue q = new Queue();

        assertTrue(q.isEmpty());

    }

    @Test void emptyErrorTest() {

        Queue q = new Queue();

        String errorMsg = q.peek();
        assertEquals("Queue is empty", errorMsg);

    }

}
