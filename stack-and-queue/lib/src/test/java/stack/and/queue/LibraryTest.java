/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void canPushToStack() {

        Stack s = new Stack();
        s.push("10");
        assertFalse(s.isEmpty());

    }


    @Test void canPushMultipleToStack() {

        Stack s = new Stack();
        s.push("10");
        s.push("8");
        s.push("6");

        String topOfStack = (String) s.peek();
        assertEquals("6", topOfStack);

    }


    @Test void canPopOffStack() {

        Stack s = new Stack();
        s.push("10");
        s.push("8");
        s.push("6");

        s.pop();

        String topOfStack = (String) s.peek();
        assertEquals("8", topOfStack);

    }

    @Test void canPopOffFullStack() {

        Stack s = new Stack();
        s.push("10");
        s.push("8");
        s.push("6");

        s.pop();
        s.pop();
        s.pop();

        assertTrue(s.isEmpty());

    }

    @Test void canPeekNextItemInStack() {

        Stack s = new Stack();
        s.push("10");
        s.push("8");
        s.push("6");

        s.pop();

        String topOfStack = (String) s.peek();
        assertEquals("8", topOfStack);

    }


    @Test void canMakeEmptyStackAndRaiseExp() {

        Stack s = new Stack();

        String topOfStack = (String) s.peek();
        assertEquals("Stack is empty", topOfStack);

    }

/////////////////////////////////////////////////////////////////////////////// QUEUES


    @Test void canEnqueue() {

        Queue q = new Queue();
        q.enqueue("emam");
        assertFalse(q.isEmpty());


    }


    @Test void canEnqueueMultiple() {

        Queue q = new Queue();
        q.enqueue("emam");
        q.enqueue("ali");
        q.enqueue("tomato");
        String frontOfQueue = (String) q.peek();
        assertEquals("emam", frontOfQueue);

    }

    @Test void canDequeue() {

        Queue q = new Queue();
        q.enqueue("emam");
        q.enqueue("ali");
        q.enqueue("tomato");
        String dequeuedValue = (String) q.dequeue();
        assertEquals("emam", dequeuedValue);

    }

    @Test void canPeekQueue() {

        Queue q = new Queue();
        q.enqueue("emam");
        q.enqueue("ali");
        q.enqueue("tomato");
        String frontOfQueue = (String) q.peek();
        assertEquals("emam", frontOfQueue);

    }

    @Test void canEmptyDequeue() {

        Queue q = new Queue();
        q.enqueue("emam");
        q.enqueue("ali");
        q.enqueue("tomato");
        q.dequeue();
        q.dequeue();
        q.dequeue();
        assertTrue(q.isEmpty());

    }


    @Test void canCreateEmptyQueue() {

        Queue q = new Queue();

        assertTrue(q.isEmpty());

    }

    @Test void emptyErrorTest() {

        Queue q = new Queue();

        String errorMsg = (String) q.peek();
        assertEquals("Queue is empty", errorMsg);

    }

    /////////////////////////////////////////////////////////////////////// Stacked Queue

    @Test void errorTestForStackedQueue() {

        StackedQueue q = new StackedQueue();

        String errorMsg = q.dequeue();
        assertEquals("Queue is empty", errorMsg);

    }

    @Test void happyPathForStackedQueue() {

        StackedQueue q = new StackedQueue();
        q.enqueue("emam");
        String msg = q.dequeue();
        assertEquals("emam", msg);

    }

/////////////////////////////////////////////////////////////////////////////////// ANIMAL SHELTER

    @Test void happyPathForAnimalShelter() {

        AnimalShelter shop = new AnimalShelter();
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("fish");
        shop.enq("Emam");

        String msg = shop.deqCat();
//        System.out.println(shop.deqCat());
        assertEquals("The oldest poor cat===>  cat", msg);

    }


    @Test void edgeCaseForAnimalShelter() {

        AnimalShelter shop = new AnimalShelter();


        shop.enq("fish");
        String msg = shop.deqCat();
        System.out.println(shop.deqCat());
        assertEquals("The oldest poor cat===>  Queue is empty", msg);

    }

    //////////////////////////////////////////////////////////////////////////////// Brackets validation

    @Test void edgeCaseForBV() {

        AnimalShelter shop = new AnimalShelter();


        String input = "" ;

        System.out.println(BracketValidator.validator(input));

        assertTrue(BracketValidator.validator(input));

    }


    @Test void happyPathForBV() {

        AnimalShelter shop = new AnimalShelter();


        String input = "()" ;

        System.out.println(BracketValidator.validator(input));

        assertTrue(BracketValidator.validator(input));

    }


    @Test void ErrorForBV() {

        AnimalShelter shop = new AnimalShelter();


        String input = "(emam" ;

        System.out.println(BracketValidator.validator(input));

        assertFalse(BracketValidator.validator(input));

    }
}
